
# Estimate DNA methylation age with R -------------------------------------
setwd("C:/Users/Administrator/Desktop/...")
list.files()

# --------------------------------------------------------------------
#BiocManager::install("WGCNA")
library(WGCNA)
#install.packages("sqldf")
library(sqldf)
library(impute)

# Normalization step --------------------------------------------------------------------
# Comment regarding the following normalization method based on BMIQ.R
# The original BMIQ function from Teschendorff 2013 (Bioinformatics. 2013 Jan 15;29(2):189-96) 
# adjusts for the type-2 bias in Illumina Infinium 450k data.
# Later functions and edits were provided by yours truly, Steve Horvath.
# I changed the code so that one can calibrate methylation data to a gold standard.
# Specifically, I took version v_1.2 by Teschendorff  and fixed minor issues. 
# Also I made the code more robust e.g. by changing the optimization algorithm.
# Toward this end, I used the method="Nelder-Mead" in optim()

source("NORMALIZATION.R")
#Comment: The file NORMALIZATION.R.txt contains R function which will only be invoked in Step 3 below.

# Age transformation and probe annotation functions ----------------------

trafo= function(x,adult.age=20) { x=(x+1)/(1+adult.age); y=ifelse(x<=1, log( x),x-1);y }
anti.trafo= function(x,adult.age=20) { ifelse(x<0, (1+adult.age)*exp(x)-1, (1+adult.age)*x+adult.age) }

# FIRST FILE ----------------------
probeAnnotation21kdatMethUsed=read.csv("probeAnnotation21kdatMethUsed.csv")
dim(probeAnnotation21kdatMethUsed);probeAnnotation21kdatMethUsed[1:3,] #[1] 21368     7
#          Name Gene_ID GenomeBuild Chr  MapInfo SourceVersion goldstandard2
# 1 cg00000292     487          36  16 28797601          36.1     0.8070658
# 2 cg00002426    7871          36   3 57718583          36.1     0.7452180
# 3 cg00003994    4223          36   7 15692387          36.1     0.0625570

# SECOND FILE ----------------------
probeAnnotation27k=read.csv("datMiniAnnotation27k.csv")
dim(probeAnnotation27k); probeAnnotation27k[1:3,]#[1] 27578     6
#          Name Gene_ID GenomeBuild Chr   Accession       overallMeanByCpGacross50data
# 1 cg00000292     487          36  16 NM_173201.2                   0.66927282
# 2 cg00002426    7871          36   3 NM_007159.2                   0.48227661
# 3 cg00003994    4223          36   7 NM_005924.3                   0.07706876

# THIRD FILE ----------------------
datClock=read.csv("AdditionalFile3.csv")
dim(datClock);datClock[1:3, 1:4]#[1] 354  23
#       CpGmarker CoefficientTraining CoefficientTrainingShrunk varByCpG
# 1 (Intercept)         0.695507258                 0.8869198       NA
# 2  cg00075967         0.129336610                 0.1080961    0.026
# 3  cg00374717         0.005017857                        NA    0.012

colnames(datClock)
# [1] "CpGmarker"                 "CoefficientTraining"       "CoefficientTrainingShrunk" "varByCpG"                 
# [5] "minByCpG"                  "maxByCpG"                  "medianByCpG"               "medianByCpGYoung"         
# [9] "medianByCpGOld"            "Gene_ID"                   "GenomeBuild"               "Chr"                      
# [13] "MapInfo"                   "SourceVersion"             "TSS_Coordinate"            "Gene_Strand"              
# [17] "Symbol"                    "Synonym"                   "Accession"                 "GID"                      
# [21] "Annotation"                "Product"                   "Marginal.Age.Relationship"


# Read in the DNA methylation data (beta values) --------------------------

# For a small file, e.g. measured on the 27k platform you could just use read.csv. 
# But for large files, e.g. those measured on the 450K platform, I recommend you use read.csv.sql.
dat0=read.csv.sql("MethylationDataExample55.csv") 
dim(dat0)#[1] 27578    17
dat0[1:3,1:5]
#    ProbeID  GSM946048  GSM946049  GSM946052  GSM946054
# 1 cg00000292 0.70586143 0.72979037 0.70458701 0.75085162
# 2 cg00002426 0.27244344 0.27398577 0.31064866 0.27864884
# 3 cg00003994 0.03703247 0.01469238 0.01711572 0.02896054

nSamples=dim(dat0)[[2]]-1 #16
nProbes= dim(dat0)[[1]] # 27578
# the following command may not be needed. But it is sometimes useful when you use read.csv.sql
dat0[,1]= gsub(x=dat0 [,1],pattern="\"",replacement="")

# Create a log file which will be output into your directory
# The code looks a bit complicated because it serves to create a log file (for error checks etc).
# It will automatically create a log file.
file.remove("LogFile.txt")
file.create("LogFile.txt")
DoNotProceed=FALSE
cat(paste( "The methylation data set contains", nSamples, "samples (e.g. arrays) and ", nProbes, " probes."),file="LogFile.txt")
if (nSamples==0) {DoNotProceed=TRUE; cat(paste( "\n ERROR: There must be a data input error since there seem to be no samples.\n Make sure that you input a comma delimited file (.csv file)\n that can be read using the R command read.csv.sql . Samples correspond to columns in that file  ."), file="LogFile.txt",append=TRUE) } 
if (nProbes==0) {DoNotProceed=TRUE; cat(paste( "\n ERROR: There must be a data input error since there seem to be zero probes.\n Make sure that you input a comma delimited file (.csv file)\n that can be read using the R command read.csv.sql  CpGs correspond to rows.")   , file="LogFile.txt",append=TRUE) } 
if (  nSamples > nProbes  ) { cat(paste( "\n MAJOR WARNING: It worries me a lot that there are more samples than CpG probes.\n Make sure that probes correspond to rows and samples to columns.\n I wonder whether you want to first transpose the data and then resubmit them? In any event, I will proceed with the analysis."),file="LogFile.txt",append=TRUE) }
if (  is.numeric(dat0[,1]) ) { DoNotProceed=TRUE; cat(paste( "\n Error: The first column does not seem to contain probe identifiers (cg numbers from Illumina) since these entries are numeric values. Make sure that the first column of the file contains probe identifiers such as cg00000292. Instead it contains ", dat0[1:3,1]  ),file="LogFile.txt",append=TRUE)  } 
if (  !is.character(dat0[,1]) ) {  cat(paste( "\n Major Warning: The first column does not seem to contain probe identifiers (cg numbers from Illumina) since these entries are numeric values. Make sure that the first column of the file contains CpG probe identifiers such as cg00000292. Instead it contains ", dat0[1:3,1]  ),file="LogFile.txt",append=TRUE)  } 
datout=data.frame(Error=c("Input error. Please check the log file for details","Please read the instructions carefully."), Comment=c("", "email Steve Horvath."))

if ( ! DoNotProceed ) {
  nonNumericColumn=rep(FALSE, dim(dat0)[[2]]-1)
  for (i in 2:dim(dat0)[[2]] ){ nonNumericColumn[i-1]=! is.numeric(dat0[,i]) }
  if (  sum(nonNumericColumn) >0 ) { cat(paste( "\n MAJOR WARNING: Possible input error. The following samples contain non-numeric beta values: ", colnames(dat0)[-1][ nonNumericColumn], "\n Hint: Maybe you use the wrong symbols for missing data. Make sure to code missing values as NA in the Excel file. To proceed, I will force the entries into numeric values but make sure this makes sense.\n" ),file="LogFile.txt",append=TRUE)  } }

XchromosomalCpGs=as.character(probeAnnotation27k$Name[probeAnnotation27k$Chr=="X"])
selectXchromosome=is.element(dat0[,1], XchromosomalCpGs )
selectXchromosome[is.na(selectXchromosome)]=FALSE
meanXchromosome=rep(NA, dim(dat0)[[2]]-1)
if (   sum(selectXchromosome) >=500 )  {
  meanXchromosome= as.numeric(apply( as.matrix(dat0[selectXchromosome,-1]),2,mean,na.rm=TRUE)) }
if (  sum(is.na(meanXchromosome)) >0 ) { cat(paste( "\n \n Comment: There are lots of missing values for X chromosomal probes for some of the samples. This is not a problem when it comes to estimating age but I cannot predict the gender of these samples.\n " ),file="LogFile.txt",append=TRUE)  } 

match1=match(probeAnnotation21kdatMethUsed$Name , dat0[,1])
if  ( sum( is.na(match1))>0 ) { 
  missingProbes= probeAnnotation21kdatMethUsed$Name[!is.element( probeAnnotation21kdatMethUsed$Name , dat0[,1])]    
  DoNotProceed=TRUE; cat(paste( "\n \n Input error: You forgot to include the following ", length(missingProbes), " CpG probes (or probe names):\n ", paste( missingProbes, sep="",collapse=", ")),file="LogFile.txt",append=TRUE)  } 

#STEP 2: Restrict the data to 21k probes and ensure they are num --------
match1=match(probeAnnotation21kdatMethUsed$Name , dat0[,1])
if  ( sum( is.na(match1))>0 ) stop(paste(sum( is.na(match1)), "CpG probes cannot be matched"))
dat1= dat0[match1,]
asnumeric1=function(x) {as.numeric(as.character(x))}
dat1[,-1]=apply(as.matrix(dat1[,-1]),2,asnumeric1)

# #STEP 3: Create the output file called datout ---------------------------
set.seed(1)
# Do you want to normalize the data (recommended)?
normalizeData=TRUE
source("StepwiseAnalysis.txt")

# # STEP 4: Output the results  -------------------------------------------
if (  sum(  datout$Comment  != "" )   ==0 ) { cat(paste( "\n The individual samples appear to be fine. "),file="LogFile.txt",append=TRUE)  } 
if (  sum(  datout$Comment != "" )   >0 ) { cat(paste( "\n Warnings were generated for the following samples.\n", datout[,1][datout$Comment != ""], "\n Hint: Check the output file for more details."),file="LogFile.txt",append=TRUE)  } 
# output the results into the directory
write.table(datout,"Output.csv", row.names=F, sep="," )

head(datout)
# SampleID   DNAmAge Comment noMissingPerSample meanMethBySample minMethBySample maxMethBySample predictedGender meanXchromosome
# GSM946048 GSM946048 60.277491                          0        0.2763985    -0.001454720       1.0015400            male       0.3610001
# GSM946049 GSM946049 43.499293                          0        0.2694547    -0.000387758       0.9998781            male       0.3544940
# GSM946052 GSM946052 27.876356                          0        0.2737413    -0.000830530       0.9998437            male       0.3558329
# GSM946054 GSM946054 37.559379                          0        0.2739245    -0.000672407       0.9994308            male       0.3545152
# GSM946055 GSM946055  8.233957                          0        0.2684906    -0.001651498       0.9993729            male       0.3529628
# GSM946056 GSM946056 20.124239                          0        0.2740375    -0.000923470       0.9996780            male       0.3585628

# SampleID=sample identifier
# DNAmAge=DNA methylation age=predicted age. 
# Comment=I only add a comment if a sample looks suspicious.
# noMissingPerSample=number of missing beta values per sample, 
# meanMethBySample, minMethBySample=the mean and min beta value before normalization
# predictedGender=predicted gender based on the mean across the X chromosomal markers.
# meanXchromosome= mean beta value across the X chromosomal markers.


#Where is the estimate of DNAmAge?
#  Answer: You can find it in the output file in the directory. Further, it is also given by the following
signif(datout$DNAmAge,2)
# [1] 60.00 43.00 28.00 38.00  8.20 20.00  4.80 38.00  6.80  3.60 31.00  0.98 62.00 24.00  8.00 43.00


# Relate DNAm age to chronological age ------------------------------------


#To address this task, we read in the sample annotation data that contain the chronological ages.
datSample=read.csv("SampleAnnotationExample55.csv")
head(datSample)# 
DNAmAge=datout$DNAmAge
medianAbsDev=function(x,y) median(abs(x-y),na.rm=TRUE)
medianAbsDev1=signif(medianAbsDev(DNAmAge, datSample$Age),2)
par(mfrow=c(1,1))
verboseScatterplot(DNAmAge, datSample$Age,xlab="DNAm Age", ylab="Chronological Age",main=paste("All, err=", medianAbsDev1) );abline(0,1) 





























